# Load packages
wants <- c('shiny','shinythemes','config','plotly','rjson','qdap','pivottabler')
has <- wants %in% rownames(installed.packages())
if (any(!has)) install.packages(wants[!has])

library(readr)
library(shiny)
library(shinythemes)
library(plotly)

library(pivottabler)

source('common.R')

period_choices <- get_choices('period')
assessment_value_choices <- get_choices("assessmentValue")

ui <- fluidPage(
  theme = shinytheme("lumen")
  , sidebarLayout(
    sidebarPanel(
      selectInput(
        inputId = "period"
        , multiple = T
        , label = strong("Period:")
        , choices = period_choices
        , selected = as.vector(unlist(period_choices)))
      , verticalLayout(
        h4("Segmentation related to evidence")
        , verticalLayout(
          selectInput(
            inputId = "technologyType"
            , multiple = T
            , label = strong("Technology type:")
            , choices = get_choices("technologyType"))
          , checkboxInput('is_technology', 'is select by technology enabled?')
        )
        , htmlOutput("technologySelector")
      )
      , verticalLayout(
        h4("Segmentation related to criteria")
        , verticalLayout(
          selectInput(
            inputId = "dimension"
            , multiple = T
            , label = strong("Dimension:")
            , choices = get_choices("dimension"))
          , checkboxInput('is_criteria', 'is selection by criteria enabled?')
        )
        , htmlOutput("criteriaSelector")
      )
      , fluidRow(actionButton("updateDataGraphButton", "Update Data/Graph", class = "btn-primary")
                 , downloadButton("downloadCSVButton", "Download .csv"))
    )
    # Output: Description, lineplot, and reference
    , mainPanel(
      navbarPage(
        "Analytics"
        , id = "mainNavigation"
        , tabPanel(
          "Assessment Result on Criteria"
          , value = "assessment-result"
          , verticalLayout(
            flowLayout(
              radioButtons(
                "measurement"
                , strong("Measurement:")
                , list('Percentage'='pct', 'Count'='count')
                , inline = F)
              , radioButtons(
                "appraiser"
                , strong("Appraiser:")
                , list("all (todos)"="all", "main (consolidador)"="main", "without main appraiser"="wo-main")
                , inline = F)
              , checkboxGroupInput(
                "assessmentValue"
                , strong("Assessment value:")
                , assessment_value_choices
                , selected = as.vector(unlist(assessment_value_choices))
                , inline = F)
              , verticalLayout(
                numericInput("limit", label = strong("Criteria limit per group:"), value=NA)
                , htmlOutput("orderBySelector"))
              , width = "580px"
            )
            , tabsetPanel(
              type = "tabs"
              , tabPanel("Radar Chart", htmlOutput("assessmentResultHTMLRadarChart"))
              , tabPanel("Stacked Bar Chart", 
                         verticalLayout(
                           radioButtons(
                             "formula"
                             , strong("Result calculated by:")
                             , list('mean'='mean', 'sum'='sum')
                             , inline = T)
                           , htmlOutput("assessmentResultHTMLStackedBarChart")
                         ))
              , tabPanel("Table", dataTableOutput("assessmentResultTable"))
            )
          )
        )
      )
    )
    , position = "right"
  )
)

# Define server for app
server <- function(input, output) {
  
  # rendering UI for parameters
  output$orderBySelector <- renderUI({
    if (length(input$assessmentValue) > 0) {
      selectInput(
        inputId = "orderBy"
        , multiple = T
        , label = strong("Order by:")
        , choices = input$assessmentValue)
    }
  })
  
  output$criteriaSelector <- renderUI({
    if (input$is_criteria && length(input$dimension) > 0) {
      selectInput(
        choices = get_choices("criteria", list(dimension=input$dimension))
        , inputId = "criteria", label = strong("Criteria:"), multiple = T)
    }
  })
  
  output$technologySelector <- renderUI({
    if (input$is_technology && length(input$technologyType) > 0) {
      technology_choices <- get_choices("technology", list(technologyType=input$technologyType))
      names(technology_choices) <- paste0('Tec-',names(technology_choices))
      selectInput(
        choices = technology_choices
        , inputId = "technology", label = strong("Technology:"), multiple = T)
    }
  })
  
  # get params for the application
  app_params <- eventReactive(input$updateDataGraphButton, {
    validate(need((length(input$period) > 0), 'Error: At least one period must be selected!!'))
    filters <- list(period = input$period
                    , dimension = input$dimension
                    , technologyType = input$technologyType)
    
    if (length(input$criteria) > 0 && input$is_criteria) {
      filters[["criteria"]] <- input$criteria
    }
    if (length(input$technology) > 0 && input$is_technology) {
      filters[["technology"]] <- input$technology
    }
    
    options <- list()
    if (input$mainNavigation == 'assessment-result') {
      options <- list(
        measurement = input$measurement
        , formula = input$formula
        , appraiser = input$appraiser
        , assessmentValue = input$assessmentValue
        , limit = input$limit
        , orderBy = input$orderBy
      )
    }
    
    list(dtype = input$mainNavigation, filters = filters, options = options)
  })
  
  # rendering UI for assessment process
  output$assessmentResultTable <- renderDataTable({
    withProgress(message = 'Making table...', {
      df <- get_data.as.df(app_params()$dtype, app_params()$filters, app_params()$options)
      validate(need((!is.null(df) & nrow(df) > 0), 'Error. There is not data. Use other filters'))
      df
    })
  })
  
  
  output$assessmentResultHTMLRadarChart <- renderUI({
    title_ <- 'Assessment Result on Criteria Through Evidences'
    title_ <- paste0(title_,' : ',ifelse(app_params()$options$measurement == 'pct','Percentage','Quantity'))
    verticalLayout(
      h3(title_)
      , plotlyOutput("assessmentResultRadarChart", height="1024px")
    )
  })
  
  output$assessmentResultRadarChart <- renderPlotly({
    get_plotly(app_params()$dtype, 'scatterpolar', app_params()$filters, app_params()$options)
  })
  
  output$assessmentResultHTMLStackedBarChart <- renderUI({
    title_ <- 'Assessment Result on Criteria Through Evidences'
    title_ <- paste0(title_,' : ',ifelse(app_params()$options$measurement == 'pct','Percentage','Quantity'))
    verticalLayout(
      h3(title_)
      , plotlyOutput("assessmentResultStackedBarChart")
    )
  })
  
  output$assessmentResultStackedBarChart <- renderPlotly({
    get_plotly(app_params()$dtype, 'stackedbar', app_params()$filters, app_params()$options)
  })
  
  # setting other UI events: download, 
  output$downloadCSVButton <- downloadHandler(
    filename = paste0(input$mainNavigation,"-data.csv")
    , content = function(file) {
      df <- get_data.as.df(app_params()$dtype, app_params()$filters, app_params()$options)
      validate(need((!is.null(df) & nrow(df) > 0), 'Error. There is not data. Use other filters'))
      write.csv(df, file, row.names = F)
    }
  )
  
}

# Run the application 
shinyApp(ui = ui, server = server)
