as.vector(unlist(aaaa))
runApp()
runApp()
runApp()
df <- read.csv('data/assessment.csv')
View(df)
colnames(assessment)
colnames(df)
View(df)
fields
df <- read_csv('data/assessment.csv')
colnames(df)
unique(df$`Avaliação consolidadora?`)
unique(df$`Avaliação da Evidência`)
df <- read_csv('data/assessment.csv')
fields <- list(
criteria='Cód. Critério', evidence='Cód. Evidência', appraiser='Avaliação consolidadora?'
, assessmentValue='Avaliação da Evidência', technologyType='Tipo de Tecnologia'
, period='Cód. Ciclo', dimension='Dimensão'
)
idx <- rep(T, nrow(df))
runApp()
##
vdata <- PivotTable$new()
library(pivottabler)
df <- read_csv('data/assessment.csv')
fields <- list(
criteria='Cód. Critério', evidence='Cód. Evidência', appraiser='Avaliação consolidadora?'
, assessmentValue='Avaliação da Evidência', technologyType='Tipo de Tecnologia'
, period='Cód. Ciclo', dimension='Dimensão'
)
unique(df$`Tipo de Tecnologia`)
unique(df$Dimensão)
filters = list(technologyType='Digital', dimension=c('Educacional','Acessibilidade'))
df <- read_csv('data/assessment.csv')
fields <- list(
criteria='Cód. Critério', evidence='Cód. Evidência', appraiser='Avaliação consolidadora?'
, assessmentValue='Avaliação da Evidência', technologyType='Tipo de Tecnologia'
, period='Cód. Ciclo', dimension='Dimensão'
)
## Apply filters
idx <- rep(T, nrow(df))
for (nfilter in names(filters)) {
if (length(filters[[nfilter]]) > 0) {
if (all(c(nfilter) %in% names(fields))) {
idx <- idx & (df[[fields[[nfilter]]]] %in% filters[[nfilter]])
}
}
}
df <- df[idx,]
library(pivottabler)
df <- read_csv('data/assessment.csv')
fields <- list(
criteria='Cód. Critério', evidence='Cód. Evidência', appraiser='Avaliação consolidadora?'
, assessmentValue='Avaliação da Evidência', technologyType='Tipo de Tecnologia'
, period='Cód. Ciclo', dimension='Dimensão'
)
filters = list(technologyType='Digital', dimension=c('Acessibilidade'))
## Apply filters
idx <- rep(T, nrow(df))
for (nfilter in names(filters)) {
if (length(filters[[nfilter]]) > 0) {
if (all(c(nfilter) %in% names(fields))) {
idx <- idx & (df[[fields[[nfilter]]]] %in% filters[[nfilter]])
}
}
}
filters
unique(df$`Tipo de Tecnologia`)
filters = list(technologyType='Física', dimension=c('Acessibilidade'))
library(pivottabler)
df <- read_csv('data/assessment.csv')
df <- read_csv('data/assessment.csv')
fields <- list(
criteria='Cód. Critério', evidence='Cód. Evidência', appraiser='Avaliação consolidadora?'
, assessmentValue='Avaliação da Evidência', technologyType='Tipo de Tecnologia'
, period='Cód. Ciclo', dimension='Dimensão'
)
## Apply filters
idx <- rep(T, nrow(df))
for (nfilter in names(filters)) {
if (length(filters[[nfilter]]) > 0) {
if (all(c(nfilter) %in% names(fields))) {
idx <- idx & (df[[fields[[nfilter]]]] %in% filters[[nfilter]])
}
}
}
filters
names(filters)
df <- read_csv('data/assessment.csv')
fields <- list(
criteria='Cód. Critério', evidence='Cód. Evidência', appraiser='Avaliação consolidadora?'
, assessmentValue='Avaliação da Evidência', technologyType='Tipo de Tecnologia'
, period='Cód. Ciclo', dimension='Dimensão'
)
## Apply filters
idx <- rep(T, nrow(df))
for (nfilter in names(filters)) {
if (length(filters[[nfilter]]) > 0) {
if (all(c(nfilter) %in% names(fields))) {
idx <- idx & (df[[fields[[nfilter]]]] %in% filters[[nfilter]])
}
}
}
df <- df[idx,]
##
vdata <- PivotTable$new()
vdata$addData(df)
fields[["assessmentValue"]]
##
vdata <- PivotTable$new()
vdata$addData(df)
vdata$addColumnDataGroups(fields[['assessmentValue']])
vdata$addRowDataGroups(fifields[['criteria']])
vdata$defineCalculation(calculationName = "Total", summariseExpression="n()")
##
vdata <- PivotTable$new()
vdata$addData(df)
vdata$addColumnDataGroups(fields[['assessmentValue']])
vdata$addRowDataGroups(fields[['criteria']])
vdata$defineCalculation(calculationName = "Total", summariseExpression="n()")
vdata$evaluatePivot()
vdata$renderPivot()
vdata$asDataFrame()
pdata <- vdata$asDataFrame()
pdata[['id']] <- rownames(pdata)
runApp()
runApp()
csv.params = default.csv.params()
csv.params$criteria$df
csv.params$criteria$df[,c('id','name')]
rdata
pdata <- vdata$asDataFrame()
pdata[['id']] <- rownames(pdata)
for (value in assessmentValues) {
pdata[[paste0('Pct. ',value)]] <- round(pdata[[value]]/pdata$Total,3)
}
rdata <- pdata[(1:nrow(pdata)-1),]
rdata
pdata <- vdata$asDataFrame()
pdata[['id']] <- rownames(pdata)
for (value in assessmentValues) {
pdata[[paste0('Pct. ',value)]] <- round(pdata[[value]]/pdata$Total,3)
}
rdata <- pdata[(1:nrow(pdata)-1),]
rdata <- merge(
rdata
, csv.params$criteria$df[,c('id','name')]
, by.x='id', by.y='id')
View(rdata)
View(rdata)
?do.call
paste0()
?paste0
?do.call
# concat columns from a df
concat.columns <- function(df, columns) {
return(do.call(
paste0
, lapply(columns , FUN = function(x) {
v <- df[[x]]; v[is.na(v)] <-''; return(paste0(v,'.'))
})))
}
# parameters to get data from CSVs
default.csv.params <- function() {
to_return <- list(
period = list(src='data/evidencias.csv', id='Cód. Ciclo', name='Ciclo')
, assessmentValue = list(src='data/assessment.csv', id='Avaliação da Evidência', name='Avaliação da Evidência')
, dimension = list(src='data/criterios.csv', id='Dimensão', name='Dimensão')
, criteria = list(
src='data/criterios.csv', id='Cód. Critério', name=c('Cód. Item Edital','Critério')
, fields=list(dimension='Dimensão',criteria='Critério'))
, technologyType = list(
src='data/evidencias.csv', id='Tipo de Tecnologia', name="Tipo de Tecnologia"
, fields=list(period='Cód. Ciclo'))
, evidence = list(
src='data/evidencias.csv', id='Cód. Evidência', name='Evidência'
, fields=list(period='Cód. Ciclo', technologyType='Tipo de Tecnologia'))
)
for (key in names(to_return)) {
if (!is.null(to_return[[key]][['src']])) {
df <- read_csv(to_return[[key]][['src']])
df[['id']] <- concat.columns(df, to_return[[key]]$id)
df[['name']] <- concat.columns(df, to_return[[key]]$name)
to_return[[key]][['df']] <- df
}
}
return(to_return)
}
csv.params = default.csv.params()
##
vdata <- PivotTable$new()
vdata$addData(df)
vdata$addColumnDataGroups(fields$assessmentValue)
vdata$addRowDataGroups(fields$criteria)
vdata$defineCalculation(calculationName = "Total", summariseExpression="n()")
vdata$evaluatePivot()
pdata <- vdata$asDataFrame()
pdata[['id']] <- rownames(pdata)
for (value in assessmentValues) {
pdata[[paste0('Pct. ',value)]] <- round(pdata[[value]]/pdata$Total,3)
}
rdata <- pdata[(1:nrow(pdata)-1),]
rdata <- merge(
rdata
, csv.params$criteria$df[,c('id','name')]
, by.x='id', by.y='id')
assessmentValues
pdata <- vdata$asDataFrame()
pdata[['id']] <- rownames(pdata)
rdata <- pdata[(1:nrow(pdata)-1),]
rdata <- merge(
rdata
, csv.params$criteria$df[,c('id','name')]
, by.x='id', by.y='id')
View(rdata)
##
vdata <- PivotTable$new()
vdata$addData(df)
vdata$addColumnDataGroups(fields$assessmentValue)
vdata$addRowDataGroups(fields$criteria)
vdata$defineCalculation(calculationName = "Total", summariseExpression="n()")
vdata$evaluatePivot()
pdata <- vdata$asDataFrame()
pdata[['id']] <- rownames(pdata)
rdata <- pdata[(1:nrow(pdata)-1),]
csv.params$criteria$df[,c('id','name')]
runApp()
runApp()
runApp()
runApp()
runApp()
c(1,2,3,4,5,6,7)[1]
df
df <- read_csv('data/assessment.csv')
c(1,2,3,4,5,6)[c(1..)]
c(1,2,3,4,5,6)[c(1,)]
c(1,2,3,4,5,6)[1?]
c(1,2,3,4,5,6)[1:]
c(1,2,3,4,5,6)[1:6]
c(1,2,3,4,5,6)[2:6]
c(8,2,3,4,5,6)[1]
c(8,2,3,4,5,6)[c(1)]
c(8,2,3,4,5,6)[[c(1)]]
runApp()
runApp()
runApp()
runApp()
runApp()
unique(df$`Avaliação consolidadora?`)
fields <- list(
criteria='Cód. Critério', evidence='Cód. Evidência', appraiser='Avaliação consolidadora?'
, assessmentValue='Avaliação da Evidência', technologyType='Tipo de Tecnologia'
, period='Cód. Ciclo', dimension='Dimensão'
)
runApp()
pdata <- vdata$asDataFrame()
pdata[['id']] <- rownames(pdata)
df <- read_csv('data/assessment.csv')
View(df)
fields <- list(
criteria='Cód. Critério', evidence='Cód. Evidência', appraiser='Avaliação consolidadora?'
, assessmentValue='Avaliação da Evidência', technologyType='Tipo de Tecnologia'
, period='Cód. Ciclo', dimension='Dimensão'
)
fields$period
fields$period
# parameters to get data from CSVs
default.csv.params <- function() {
to_return <- list(
period = list(src='data/evidencias.csv', id='Cód. Ciclo', name='Ciclo')
, assessmentValue = list(src='data/assessment.csv', id='Avaliação da Evidência', name='Avaliação da Evidência')
, dimension = list(src='data/criterios.csv', id='Dimensão', name='Dimensão')
, criteria = list(
src='data/criterios.csv', id='Cód. Critério', name=c('Cód. Item Edital','Critério')
, fields=list(dimension='Dimensão',criteria='Critério'))
, technologyType = list(
src='data/evidencias.csv', id='Tipo de Tecnologia', name="Tipo de Tecnologia"
, fields=list(period='Cód. Ciclo'))
, evidence = list(
src='data/evidencias.csv', id='Cód. Evidência', name='Evidência'
, fields=list(period='Cód. Ciclo', technologyType='Tipo de Tecnologia'))
)
for (key in names(to_return)) {
if (!is.null(to_return[[key]][['src']])) {
df <- read_csv(to_return[[key]][['src']])
df[['id']] <- df[[to_return[[key]]$id]]
df[['name']] <- concat.columns(df, to_return[[key]]$name, '.')
to_return[[key]][['df']] <- df
}
}
return(to_return)
}
csv.params = default.csv.params()
csv.params$period$id
csv.params$period$df
# parameters to get data from CSVs
default.csv.params <- function() {
to_return <- list(
period = list(src='data/evidencias.csv', id='Cód. Ciclo', name='Ciclo')
, assessmentValue = list(src='data/assessment.csv', id='Avaliação da Evidência', name='Avaliação da Evidência')
, dimension = list(src='data/criterios.csv', id='Dimensão', name='Dimensão')
, criteria = list(
src='data/criterios.csv', id='Cód. Critério', name=c('Cód. Item Edital','Critério')
, fields=list(dimension='Dimensão',criteria='Critério'))
, technologyType = list(
src='data/evidencias.csv', id='Tipo de Tecnologia', name="Tipo de Tecnologia"
, fields=list(period='Cód. Ciclo'))
, evidence = list(
src='data/evidencias.csv', id='Cód. Evidência', name='Evidência'
, fields=list(period='Cód. Ciclo', technologyType='Tipo de Tecnologia'))
)
for (key in names(to_return)) {
if (!is.null(to_return[[key]][['src']])) {
df <- read_csv(to_return[[key]][['src']])
df[['id']] <- df[[to_return[[key]]$id]]
df[['name']] <- concat.columns(df, to_return[[key]]$name, '.')
to_return[[key]][['df']] <- df
u_df <- unique(df[,c('id','name')])
u_list <- as.list(u_df$name)
names(u_list) <- u_df$id
to_return[[key]][['unique']] <- u_list
}
}
return(to_return)
}
csv.params = default.csv.params()
csv.params$period$unique
runApp()
runApp()
runApp()
runApp()
runApp()
?validate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p <- add_trace(
p
, r = df[[value]][[p_idx]] # $Pct[u_idx]
, theta = df[[sd$fcontent$name]][u_idx]
, name = paste0(period,':',value)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(p_idx)
runApp()
?order
runApp()
head(10)
?head
df <- head(df,20)
runApp()
runApp()
do.call(order, list(a=c(23,2,32,42,51,62), b=c(23,34,34,45,42)))
?order
runApp()
?numericInput
runApp()
runApp()
?order
runApp()
runApp()
runApp()
NA > 0
(NA > 0)
if (NA > 0) T
as.numeric(NA)
length(NA)
length(NULL)
T & F
T && F
T && T
(NA >0)
runApp()
(NA >0)
runApp()
runApp()
runApp()
# RadarChart, Dot Chart
#p <- plot_ly(type=ctype, mode='lines+markers')
#if (dtype != 'ledfafarning-performance') {
p <- plot_ly(type = ctype, fill = 'toself')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?add_trace
runApp()
names(r) <- df[[value]][p_idx]
runApp()
runApp()
schema(plot_ly())
schema(plot_ly)
runApp()
title_ <- 'Assessments on Criteria Through Evidences'
runApp()
layout()
?layout
?plotlyOutput(
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# parameters to get data from CSVs
default.csv.params <- function() {
to_return <- list(
period = list(src='data/evidencias.csv', id='Cód. Ciclo', name='Ciclo')
, assessmentValue = list(src='data/assessment.csv', id='Avaliação da Evidência', name='Avaliação da Evidência')
, dimension = list(src='data/criterios.csv', id='Dimensão', name='Dimensão')
, criteria = list(
src='data/criterios.csv', id='Cód. Critério', name=c('Cód. Item Edital','Critério')
, fields=list(dimension='Dimensão',criteria='Critério'))
, technologyType = list(
src='data/evidencias.csv', id='Tipo de Tecnologia', name="Tipo de Tecnologia"
, fields=list(period='Cód. Ciclo'))
, evidence = list(
src='data/evidencias.csv', id='Cód. Evidência', name='Evidência'
, fields=list(period='Cód. Ciclo', technologyType='Tipo de Tecnologia'))
)
for (key in names(to_return)) {
if (!is.null(to_return[[key]][['src']])) {
df <- read_csv(to_return[[key]][['src']])
df[['id']] <- df[[to_return[[key]]$id]]
df[['name']] <- concat.columns(df, to_return[[key]]$name, '.')
to_return[[key]][['df']] <- df
u_df <- unique(df[,c('id','name')])
u_list <- as.list(u_df$name)
names(u_list) <- u_df$id
to_return[[key]][['unique']] <- u_list
}
}
return(to_return)
}
csv.params = default.csv.params()
csv.params$criteria
csv.params$criteria$df
csv.params$criteria$fields$dimension
csv.params$criteria$fields
csv.params$criteria$df[,c('id','name',csv.params$criteria$fields$dimension)]
runApp()
?plot_ly
?add_trace
mean(
)
?mean
x <- unique(df[[csv.params$criteria$fields$dimension]])
unique(df[[csv.params$criteria$fields$dimension]])
unique(csv.params$criteria$df[[csv.params$criteria$fields$dimension]])
lapply(unique(csv.params$criteria$df[[csv.params$criteria$fields$dimension]]), FUN = function(x) {
mean(c(1,2,3,2,3,4,3,34,3,43,43,4,3))
})
vapply(unique(csv.params$criteria$df[[csv.params$criteria$fields$dimension]]), FUN = function(x) {
mean(c(1,2,3,2,3,4,3,34,3,43,43,4,3))
})
lapply(unique(csv.params$criteria$df[[csv.params$criteria$fields$dimension]]), FUN = function(x) {
mean(c(1,2,3,2,3,4,3,34,3,43,43,4,3))
})
unique(csv.params$criteria$df[[csv.params$criteria$fields$dimension]])
?vapply(list, function, FUN.VALUE = type, ...)
sapply(unique(csv.params$criteria$df[[csv.params$criteria$fields$dimension]]), FUN = function(x) {
mean(c(1,2,3,2,3,4,3,34,3,43,43,4,3))
})
as.vector(sapply(unique(csv.params$criteria$df[[csv.params$criteria$fields$dimension]]), FUN = function(x) {
mean(c(1,2,3,2,3,4,3,34,3,43,43,4,3))
}))
?add_trace
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("pivottabler")
runApp()
runApp()
runApp()
# Load packages
wants <- c('shiny','shinythemes','config','plotly','rjson','qdap','pivottabler')
has <- wants %in% rownames(installed.packages())
if (any(!has)) install.packages(wants[!has])
rownames(installed.packages())
runApp()
?read.csv
?read_csv
installed.packages('dplyr')
installed.packages('dplyr')
